name: Cove API AI - CI/CD Pipeline

on:
  push:
    branches: 
      - main
      - develop
      - 'feature/**'
      - 'release/**'
      - 'hotfix/**'
  pull_request:
    branches:
      - main
      - develop

# Global environment variables
env:
  NODE_VERSION: 20.x
  PNPM_VERSION: 8.x

# Concurrency settings to prevent multiple workflows on same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Lint and Code Quality Check
  lint-and-quality:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install Dependencies
        run: pnpm install

      - name: Run ESLint
        run: pnpm lint

      - name: Check Code Formatting
        run: pnpm format:check

      - name: TypeScript Type Check
        run: pnpm tsc --noEmit

  # Unit and Integration Testing
  test:
    name: Unit and Integration Tests
    needs: lint-and-quality
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: [18.x, 20.x]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install Dependencies
        run: pnpm install

      - name: Run Unit Tests
        run: pnpm test

      - name: Run Integration Tests
        run: pnpm test:integration

      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

  # Security Scanning
  security-scan:
    name: Security Vulnerability Scan
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install Dependencies
        run: pnpm install

      - name: Run Dependency Audit
        run: pnpm audit --audit-level high

      - name: Scan for Secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --max-depth 30

  # Performance and Bundle Analysis
  performance-check:
    name: Performance and Bundle Analysis
    needs: security-scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install Dependencies
        run: pnpm install

      - name: Check Bundle Size
        run: pnpm size-limit

      - name: Performance Benchmarks
        run: pnpm benchmark

  # Build and Artifact Generation
  build:
    name: Build Artifacts
    needs: performance-check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install Dependencies
        run: pnpm install

      - name: Build Project
        run: pnpm build

      - name: Generate Documentation
        run: pnpm docs:generate

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: cove-api-ai-dist
          path: dist/
          retention-days: 5

  # Deployment
  deploy:
    name: Deploy to Staging
    needs: build
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to Staging
        run: |
          echo "Deploying to staging environment"
          # Add your deployment script here

  # Release
  release:
    name: Create Release
    needs: deploy
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: google-github-actions/release-please-action@v4
        with:
          release-type: node
          package-name: cove-api-ai

  # Notification
  notify:
    name: Notify Team
    needs: [lint-and-quality, test, security-scan, performance-check, build]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Send Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

# Optional: Add manual workflow dispatch
on:
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'Deploy Target'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production